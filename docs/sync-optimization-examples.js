/**
 * Exemples d'utilisation des optimisations de synchronisation
 * AG-Tablette - Optimisations de Performance
 */

// ========================================
// 1. UTILISATION DE LA SYNCHRONISATION INTELLIGENTE
// ========================================

import { getLastSyncInfo, smartSync } from '../src/services/activity-sync.js';

// Synchronisation automatique (respecte le cache de 24h)
async function autoSync() {
  const result = await smartSync();

  switch (result) {
    case 'recent':
      console.log('‚úÖ Synchronisation r√©cente, pas de mise √† jour n√©cessaire');
      break;
    case 'completed':
      console.log('üîÑ Synchronisation termin√©e avec succ√®s');
      break;
    case 'offline':
      console.log('üì∂ Hors ligne, synchronisation report√©e');
      break;
    case 'in_progress':
      console.log('‚è≥ Synchronisation d√©j√† en cours');
      break;
    case 'error':
      console.log('‚ùå Erreur lors de la synchronisation');
      break;
  }
}

// Synchronisation forc√©e (ignore le cache)
async function forceSync() {
  const result = await smartSync({ force: true });
  console.log('Synchronisation forc√©e:', result);
}

// V√©rifier les informations de la derni√®re synchronisation
async function checkSyncStatus() {
  const info = await getLastSyncInfo();

  if (info) {
    console.log('Derni√®re synchronisation:', info.lastSyncDate);
    console.log('Activit√©s synchronis√©es:', `${info.syncedFilesCount}/${info.totalFilesCount}`);
    console.log('Synchronisation requise:', info.nextSyncDue ? 'Oui' : 'Non');
  } else {
    console.log('Aucune synchronisation pr√©c√©dente d√©tect√©e');
  }
}

// ========================================
// 2. GESTION DU CACHE DE M√âTADONN√âES
// ========================================

import {
  clearExpiredSyncMetadata,
  getSyncMetadata,
  isRecentSyncAvailable
} from '../src/utils/indexeddb-activities.js';

// V√©rifier si une synchronisation r√©cente est disponible
async function checkRecentSync() {
  const isRecent = await isRecentSyncAvailable(24); // 24 heures

  if (isRecent) {
    console.log('‚úÖ Synchronisation r√©cente disponible, pas besoin de resync');
    return false; // Pas besoin de synchroniser
  } else {
    console.log('‚ö†Ô∏è Synchronisation p√©rim√©e, mise √† jour recommand√©e');
    return true; // Synchronisation recommand√©e
  }
}

// Obtenir les m√©tadonn√©es d√©taill√©es du cache
async function getCacheDetails() {
  const metadata = await getSyncMetadata();

  if (metadata) {
    console.log('Cache valide:', {
      lastSync: new Date(metadata.lastSyncDate).toLocaleString(),
      expiry: new Date(metadata.expiryDate).toLocaleString(),
      files: metadata.serverFiles?.length || 0,
      themes: metadata.serverThemes?.length || 0
    });
  } else {
    console.log('Aucun cache valide trouv√©');
  }
}

// Nettoyer le cache expir√©
async function cleanExpiredCache() {
  const wasExpired = await clearExpiredSyncMetadata();
  console.log('Cache expir√© nettoy√©:', wasExpired ? 'Oui' : 'Non');
}

// ========================================
// 3. NAVIGATION OPTIMIS√âE
// ========================================

import { goToHomePage } from '../src/controllers/Core/Tools/general.js';

// Navigation optimis√©e vers la page d'accueil
function navigateToHome() {
  console.log('üè† Navigation vers la page d\'accueil (optimis√©e)');
  goToHomePage(); // Plus de rechargement complet !
}

// Surveillance des changements d'√©tat
function setupStateWatcher() {
  window.addEventListener('state-changed', () => {
    console.log('√âtat de l\'application mis √† jour');
  });
}

// ========================================
// 4. WORKFLOW COMPLET OPTIMIS√â
// ========================================

/**
 * Workflow optimis√© de synchronisation
 * Cette fonction impl√©mente la logique compl√®te d'optimisation
 */
async function optimizedSyncWorkflow() {
  console.log('üöÄ D√©marrage du workflow de synchronisation optimis√©');

  try {
    // 1. V√©rifier d'abord le cache local
    const needsSync = await checkRecentSync();

    if (!needsSync) {
      console.log('‚úÖ Cache valide, pas de synchronisation n√©cessaire');
      return 'cache_hit';
    }

    // 2. V√©rifier la connectivit√©
    if (!navigator.onLine) {
      console.log('üì∂ Hors ligne, utilisation du cache existant');
      return 'offline';
    }

    // 3. Lancer la synchronisation intelligente
    console.log('üîÑ Lancement de la synchronisation...');
    const syncResult = await smartSync();

    // 4. Traiter le r√©sultat
    switch (syncResult) {
      case 'completed':
        console.log('‚úÖ Synchronisation termin√©e avec succ√®s');
        break;
      case 'recent':
        console.log('‚ÑπÔ∏è Synchronisation d√©j√† r√©cente');
        break;
      default:
        console.log('‚ö†Ô∏è R√©sultat de synchronisation:', syncResult);
    }

    return syncResult;

  } catch (error) {
    console.error('‚ùå Erreur dans le workflow de synchronisation:', error);
    return 'error';
  }
}

// ========================================
// 5. CONFIGURATION ET MONITORING
// ========================================

/**
 * Configuration de debug pour les optimisations
 */
function enableSyncDebug() {
  // Activer les logs d√©taill√©s
  localStorage.setItem('debug', 'true');
  console.log('üîç Mode debug activ√© pour la synchronisation');
}

/**
 * Statistiques de performance de la synchronisation
 */
async function getSyncPerformanceStats() {
  const metadata = await getSyncMetadata();

  if (!metadata) {
    return null;
  }

  const timeSinceLastSync = Date.now() - metadata.lastSyncDate;
  const timeUntilExpiry = metadata.expiryDate - Date.now();

  return {
    lastSync: {
      timestamp: metadata.lastSyncDate,
      timeAgo: Math.floor(timeSinceLastSync / (1000 * 60 * 60)) + ' heures',
      filesCount: metadata.syncedFilesCount || 0,
      themesCount: metadata.totalThemesCount || 0
    },
    cache: {
      isValid: timeUntilExpiry > 0,
      expiresIn: Math.floor(timeUntilExpiry / (1000 * 60 * 60)) + ' heures',
      sizeEstimate: (metadata.serverFiles?.length || 0) + (metadata.serverThemes?.length || 0)
    },
    recommendations: {
      shouldSync: timeUntilExpiry <= 0,
      shouldCleanCache: timeSinceLastSync > 7 * 24 * 60 * 60 * 1000, // 7 jours
      cacheHealth: timeUntilExpiry > 0 ? 'good' : 'expired'
    }
  };
}

// ========================================
// 6. EXEMPLES D'UTILISATION PRATIQUE
// ========================================

// Au d√©marrage de l'application
async function onAppStart() {
  console.log('üì± D√©marrage de l\'application');

  // Workflow de synchronisation optimis√©
  const syncResult = await optimizedSyncWorkflow();

  // Afficher les statistiques
  const stats = await getSyncPerformanceStats();
  if (stats) {
    console.log('üìä Statistiques de synchronisation:', stats);
  }
}

// Lors du retour √† la page d'accueil
function onHomePageNavigation() {
  console.log('üè† Navigation vers la page d\'accueil');

  // Navigation optimis√©e (pas de rechargement)
  navigateToHome();

  // Pas de synchronisation automatique car g√©r√©e intelligemment
  console.log('‚úÖ Navigation termin√©e sans rechargement');
}

// Synchronisation manuelle (bouton utilisateur)
async function onManualSync() {
  console.log('üë§ Synchronisation manuelle demand√©e');

  const result = await smartSync({ force: true });

  if (result === 'completed') {
    // Afficher notification de succ√®s
    window.dispatchEvent(new CustomEvent('show-notif', {
      detail: {
        message: 'Synchronisation termin√©e avec succ√®s',
        type: 'success'
      }
    }));
  }
}

// ========================================
// 7. EXPORT DES FONCTIONS D'EXEMPLE
// ========================================

export {
  autoSync, checkRecentSync, checkSyncStatus, cleanExpiredCache, enableSyncDebug, forceSync, getCacheDetails, getSyncPerformanceStats, navigateToHome, onAppStart,
  onHomePageNavigation,
  onManualSync, optimizedSyncWorkflow
};
