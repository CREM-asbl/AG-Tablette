import { signal } from '@lit-labs/signals';
import { getAllModules, getAllThemes, saveModule, saveTheme } from '../utils/indexeddb-activities.js';

// Signal pour le th√®me s√©lectionn√©
export const selectedNotion = signal(null);

// Signal pour stocker les th√®mes en cache
export const cachedThemes = signal([]);

// Signal pour stocker les s√©quences en cache
export const cachedSequences = signal([]);

// Signal pour stocker les fichiers en cache
export const cachedFiles = signal([]);

/**
 * Initialise les caches depuis IndexedDB au d√©marrage de l'application
 */
export async function initializeCachesFromIndexedDB() {
  try {
    // Charger les th√®mes depuis IndexedDB
    const savedThemes = await getAllThemes();
    if (savedThemes && savedThemes.length > 0) {
      cachedThemes.set(savedThemes.map(t => ({ id: t.id, ...t.data })));
      console.log('Th√®mes charg√©s depuis IndexedDB:', savedThemes.length);
    }

    // Charger les modules depuis IndexedDB
    const savedModules = await getAllModules();
    console.log('[DEBUG] Modules bruts r√©cup√©r√©s depuis IndexedDB:', savedModules);
    if (savedModules && savedModules.length > 0) {
      console.log('[DEBUG] Structure du premier module:', savedModules[0]);
      // Grouper les modules par th√®me
      const modulesByTheme = {};
      savedModules.forEach(module => {
        const themeId = module.data?.theme || module.theme;
        console.log('[DEBUG] Module ID:', module.id, 'Theme ID:', themeId);
        if (!modulesByTheme[themeId]) {
          modulesByTheme[themeId] = [];
        }
        modulesByTheme[themeId].push({ id: module.id, ...module.data });
      });
      // Convertir en format cachedSequences
      const sequences = Object.entries(modulesByTheme).map(([theme, modules]) => ({
        theme,
        modules
      }));
      cachedSequences.set(sequences);
      console.log('Modules charg√©s depuis IndexedDB pour', Object.keys(modulesByTheme).length, 'th√®mes');
    }
  }
  catch (error) {
    console.warn('Erreur lors de l\'initialisation des caches depuis IndexedDB:', error);
  }
}
/**
 * Filtre strictement les propri√©t√©s pour ne garder que les donn√©es JSON-serializables
 */

/**
 * Sauvegarde les th√®mes dans IndexedDB quand ils sont mis √† jour
 * Filtre les propri√©t√©s non s√©rialisables
 */
export async function saveThemesToIndexedDB(themes) {
  try {
    for (const theme of themes) {
      let serializableTheme;
      try {
        serializableTheme = JSON.parse(JSON.stringify(theme));
      } catch (err) {
        console.warn('Th√®me non s√©rialisable ignor√©:', theme.id, err);
        continue;
      }
      await saveTheme(theme.id, serializableTheme);
    }
    console.log('Th√®mes sauvegard√©s dans IndexedDB:', themes.length);
  } catch (error) {
    console.warn('Erreur lors de la sauvegarde des th√®mes:', error);
  }
}

/**
 * Sauvegarde les modules dans IndexedDB quand ils sont mis √† jour
 */
export async function saveModulesToIndexedDB(modules, themeId) {
  try {
    for (const module of modules) {
      // Nettoyer les donn√©es pour √©viter les erreurs de s√©rialisation
      const cleanedModule = JSON.parse(JSON.stringify({ ...module, theme: themeId }));
      await saveModule(module.id, cleanedModule);
    }
    console.log('Modules sauvegard√©s dans IndexedDB pour le th√®me:', themeId);
  } catch (error) {
    console.warn('Erreur lors de la sauvegarde des modules:', error);
  }
}

/**
 * Synchronisation globale des th√®mes et modules au d√©marrage
 * Pr√©charge tous les th√®mes et leurs modules dans IndexedDB et en m√©moire
 */
export async function syncAllThemesAndModules() {
  if (!navigator.onLine) {
    console.log('Synchronisation globale ignor√©e (hors ligne)');
    return;
  }
  try {
    const { findAllThemes, getModulesDocFromTheme, debugFirebaseModules } = await import('../firebase/firebase-init');
    console.log('[DEBUG] D√©but de la synchronisation globale des th√®mes et modules...');

    // Diagnostic Firebase avant synchronisation
    await debugFirebaseModules();

    const themes = await findAllThemes();
    console.log(`[DEBUG] ${themes?.length || 0} th√®mes r√©cup√©r√©s:`, themes?.map(t => t.id));

    if (themes && themes.length > 0) {
      await saveThemesToIndexedDB(themes);
      cachedThemes.set(themes);
      const allSequences = [];
      for (const theme of themes) {
        try {
          console.log(`[DEBUG] Synchronisation des modules pour le th√®me: ${theme.id}`);
          const modules = await getModulesDocFromTheme(theme.id);
          console.log(`[DEBUG] Modules r√©cup√©r√©s pour le th√®me '${theme.id}':`, modules?.length || 0, modules);

          if (modules && modules.length > 0) {
            await saveModulesToIndexedDB(modules, theme.id);
            allSequences.push({ theme: theme.id, modules });
            console.log(`‚úÖ ${modules.length} modules synchronis√©s pour le th√®me '${theme.id}'`);
          } else {
            // Conserver les modules d√©j√† pr√©sents en cache si aucun module trouv√©
            const cached = cachedSequences.get().find(seq => seq.theme === theme.id);
            if (cached && cached.modules?.length > 0) {
              allSequences.push(cached);
              console.log(`üì¶ Aucun module trouv√© pour le th√®me '${theme.id}', cache conserv√© (${cached.modules.length} modules).`);
            } else {
              console.warn(`‚ö†Ô∏è Aucun module disponible pour le th√®me '${theme.id}' (ni en ligne, ni en cache).`);
            }
          }
        } catch (err) {
          console.error(`‚ùå Erreur lors de la r√©cup√©ration des modules pour le th√®me '${theme.id}':`, err);

          // En cas d'erreur, essayer de conserver le cache existant
          const cached = cachedSequences.get().find(seq => seq.theme === theme.id);
          if (cached && cached.modules?.length > 0) {
            allSequences.push(cached);
            console.log(`üîÑ Erreur r√©cup√©ration, cache conserv√© pour '${theme.id}' (${cached.modules.length} modules)`);
          }
        }
      }
      if (allSequences.length > 0) {
        cachedSequences.set(allSequences);
        console.log('Synchronisation globale termin√©e :', allSequences.length, 'th√®mes avec modules pr√©charg√©s');
      } else {
        console.warn('Aucun module n\'a pu √™tre synchronis√©, cache m√©moire conserv√©.');
      }
    } else {
      console.warn('Aucun th√®me trouv√© lors de la synchronisation globale.');
    }
  } catch (error) {
    console.warn('Erreur lors de la synchronisation globale des th√®mes/modules:', error);
  }
}

// Fonction pour basculer la s√©lection d'un th√®me
export const toggleNotion = (notionName) => {
  if (selectedNotion.get() === notionName) {
    selectedNotion.set(null);
  } else {
    selectedNotion.set(notionName);
  }
};

export const selectedSequence = signal('');

export const toggleSequence = (sequenceTitle) => {
  const current = selectedSequence.get();

  if (current !== sequenceTitle) {
    // S√©lectionner la nouvelle s√©quence
    selectedSequence.set(sequenceTitle);
  } else {
    // Si on clique sur l'√©l√©ment d√©j√† s√©lectionn√©, on le d√©s√©lectionne
    selectedSequence.set('');
  }
};

// Appel automatique au d√©marrage
async function startCachesAndSync() {
  await initializeCachesFromIndexedDB();
  await syncAllThemesAndModules();
}
startCachesAndSync();